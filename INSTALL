INSTALLATION OF PRIMEFORM/GW
  updated to PFGW v1.2 Release (January 30, 2005)

SUPPORTED OPERATING SYSTEMS

Currently PrimeForm/GW is known to build and function correctly on the
following processors and operating system configurations.

Processors

Intel Pentium or compatibles.
Intel Pentium-II or compatibles.
Intel Pentium-III or compatibles.
Intel Pentium-IV or compatibles.
AMD K6 or compatibles.
AMD Athlon/Duron or compatibles.
AMD Athlon64/Opteron (but only in 32 bit mode)

All Woltman FFT code (as of v22) auto detects the CPU type, and chooses
the optimal code to run.  The GMP code can be "tuned" to the CPU (Win32
version) by placing the correct libgmp-3.dll file (correct for the CPU)
into the directory with PFGW.exe (or WinPFGW.exe)

Operating systems

Windows 95/98/ME ("Command prompt" or "MS-DOS prompt" required)
Windows NT/2000/XP ("Command prompt" required).
Windows 9x/ME/NT/2000/XP GUI app (using WinPFGW)
BeOS R5 x86 Personal/Professional Edition.
Linux x86 (tested with Debian/Mandrake/RedHat6 (and 7.3 and 8) releases).
MinGW32 (Opensource Win32 build, See MINGW32 section for more information)

If your processor is not listed, then PrimeForm/GW is awaiting a port to
that architecture. If your operating system is not listed, there is a good
chance that PrimeForm/GW may still function correctly on it - for example,
it should work on many other x86 Linuxes than those listed.

INSTALLATION INSTRUCTIONS
  
1) If you received a binary version of PrimeForm/GW, then you already
have installed it. You may copy the PrimeForm/GW executable (called
'pfgw' or 'pfgw.exe' or 'winpfgw.exe') wherever you wish.  

Note for Win32 installations: A speed improvement can be obtained by
placing the appropriate GMP dll file (a libgmp-3.dll) into the directory
where pfgw.exe is to be placed.  PFGW will use the functions from the
dll found at run time (if it can find one) in place of the static
linked GMP functions.  The static functions may not be optimal for
all systems.  They are a generic i386 build of GMP.  Usage of the
DLL  is seemless. Simply copy the dll into the correct directory, and
it will be used.


2) If you received a source code version of PrimeForm/GW, then you
must build it. The build process should be familiar to anyone who
has ever built GNU programs, and while there is no attempt to do
everything that the GNU installers do, the basic operation should be
very familiar. If you are building on Windows, the instructions are a
little different.

BUILD INSTRUCTIONS FOR SOURCE DISTRIBUTIONS

For Windows builds, simply uncompress the source tree into a directory,
then open the openpfgw.dsw workspace in Microsoft Visual C++ 6.0 or higher
and build the project from within the IDE.  All should build.  A pfgw.exe
and WinPFGW.exe should exist within this directory after a complete 
build.  BE SURE to set your build output environment to build a release
build (debug build will probably be the default for your system)

If, on the other hand, you have a unixlike system, then the build is done
using GNU tools. In a shell, first type './configure' in this directory.
NOTE, configure "might" not have the executable bit set, depending upon
which source drop you have aquired.  If it is not set, then first type
chmod +x configure to enable configure to execute (or type sh configure)
The configure program accepts various options which may be detailed by
'./configure --help'. The configure program will determine which modules
are required for your architecture, and proceed to configure them
individually. You should soon find out very quickly if your
architecture is indeed supported, or if you have all the necessary
modules.  The most frequent "missing" module is gmp.  If an installed
gmp is missing then see the "MISSING GMP" section, 

TIPS FOR CONFIGURE USAGE: If you have not previously used configure
scripts before, there are some features of configure that are often
overlooked. Firstly, as with any shell commands, it is often useful
to type './configure', to avoid conflicts with other programs on the
system with the same name that may be in your path. Much of the
configuration is runtime tests, but configure will produce a file called
'config.status'. You may execute this file at any later time (it is a
shell script) and it will very quickly execute the file-producing steps
of the configuration.

RECOMMENDED CONFIGURE USAGE: IT IS HIGHLY RECOMMENDED THAT THE CODE IS
BUILT IN A SEPARATE DIRECTORY FROM THE ACTUAL DISTRIBUTION. In this way,
you may keep different build settings for different targets, and at the
very least keep your source distribution clean. This method is often
essential if you are using a cross-compiler. To build using this method,
you will require GNU make. Some versions of make, such as bsd, do not
necessarily support this method. Create a separate directory in which to
build the program. THE SEPARATE DIRECTORY MUST NOT BE A PARENT OR CHILD
OF THE DISTRIBUTION DIRECTORY. A common place is 'parallel' with the
distribution (for instance, create the 'build' directory in the same
directory as 'openpfgw' itself). Run the distribution's configure script
from within your new directory using a relative path, for instance
'../openpfgw/configure'. All configure output, including the makefiles,
will be created in the build directory. Running the makefiles with 'make'
will then produce object code in the build directory, cleanly and
painlessly.

MINGW32 (How to build under MinGW32)
This may not be the "best" way to build under MinGW, but it has been 
used successfully.  First, MinGW and MSYS need to be correctly installed
on the target PC. Startup the MSYS envoronment, and run ./configure  
This should build all of the Makefiles on the system.  Then, before
proceeding with make, run 'patch < mingw.patch'.  This corrects some
of the "elf"isms which are built into the configuration.  MinGW is a 
"pe-i386" object code compiler and not an "elf32-i386" which Linux is.
This patch file will fix the "main" Makefile, and also fix 3 other
Makefile in the pform set of directories.   Once the system is 
"patched", then simply run make, and a pfgw.exe should be generated.

MISSING GMP
If gmp is missing, there are several possible actions to take.
1. Correctly build and install gmp on this machine (recommended method)
2. If GMP is installed (but configure did not find it), then do this:
      cd packages
      mkdir gmp
      cd gmp
      echo 'all:' > Makefile
      ln -s /usr/local/include/gmp.h gmp.h
      mkdir .libs
      cd .libs
      ln -s /usr/local/libs/libgmp.a libgmp.a
   replace /usr/local/lib with just /usr/lib if that's where your 
   GMP resides
3. Configure a local GMP inside of the packages/gmp folder.
   Uncompress the tarball for the gmp distribution, and mv the whole
   structure of it into ./packages/gmp   Now simply run ./configure
   within this ./packages/gmp directory.   Then run make from within
   the root OpenPFGW directory and pfgw's Makefile will call the 
   Makefile within ./packages/gmp to build gmp.


Once the configuration process has completed, you may type 'make' (in the
build directory) to build the program. The individual modules will be
built, and finally linked to produce a new program executable in the
build directory. You may copy the executable and use 'make clean' to
remove temporary files.

Note that the operations 'make distclean' and 'make maintainer-clean'
that are common to GNU packages work a little differently to what you
may expect, in particular, they will not recurse subdirectories. If
you ever need to do this, you must manually perform it in each
subdirectory. Note that if you are performing the maintainer-clean
operation, you must have GNU autoconf.

For your convenience, the generated makefiles also have some other
useful options, for instance 'make almost-clean' will clean everything
except third-party libraries, while 'make dependencies' will rebuild
the dependencies in all the PrimeForm/GW modules. 'make quick' will
also not run the makefiles in the third-party libraries.

Happy hunting!

Chris Nash
Lexington KY
UNITED STATES
chris_nash@prodigy.net

Jim Fougeron
jfoug@cox.net
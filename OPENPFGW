OPENPFGW SUBMISSION GUIDELINES
  Version (alpha) 1.2 (dev_20020327), 27 March 2002
  
This document details how to become a contributor to the OpenPFGW
project. Firstly, it's not necessary to be a programmer to make a
contribution - algorithmic or mathematical contributions are
equally, if not more valuable. However, source code changes are
likely to present the greatest difficulties in project management.

Changes, modifications, and improvements are always welcome, in
particular, ports to other architectures or operating systems are
greatly desired. There are a few rules however in such development,
simply because the OpenPFGW project has limited resources.

VERSION CONTROL

The OpenPFGW source tree is under version control. This allows
changes made to the source to be integrated, even with multiple
developers. However, there is only ONE source tree.
Do NOT request for instance that the Windows version should be
separated from the rest of the development - there simply isn't
the resources. This does NOT however prevent you from performing
OS-specific development - if you have an OS-specific module, it
can be included in the 'system' subdirectory. It is then your
responsibility to make sure that, not only does the contribution
build on your system, but also that other systems are not affected.

The single source tree contains the various modules for all systems.
Note that you need only check out the modules that are required for
your system, and in most cases these modules are configured during
the build process. If your build environment is sufficiently
UNIX-like, running './configure' and then 'make' in the root of
the source tree should suffice. If this method does not work for you,
then it is suggested that you learn how to use tools such as 'autoconf'
to edit the configure.in file as needed. Windows versions are
pre-configured with suitable headers and project files for use in
Microsoft Visual C++ 6.0.  (Visual .Net has not yet been tested)

The version control used by OpenPFGW is CVS. At the present time,
checking in and out of versions is done on a local machine. (If
in the unlikely event there is far too much development taking
place to be managed manually, the use of CVS allows a transfer
to SourceForge or a similar online repository). The repository is
backed up to CD-RW on a regular basis. I will endeavor to perform
source drops on a regular basis, and zipped versions of the
modules (or patch files where appropriate) will be made available
at primeform.net. While you cannot currently connect directly to
the repository, it is highly advised that you look into importing
any source drops into a local version control system. This will
make it easier to track your changes and integrate any other
changes without affecting work you are currently doing on your
own private branch. I recommend CVS, because it is powerful and
pretty much the standard.

SOURCE DROPS

There are three levels of source drop, corresponding to labels
applied to the source tree at key points in the development. The
oldest source drops are 'Release' revisions. These correspond to
binary distributions, they are guaranteed to build and function
as expected. 'Stable' revisions include more recent changes, which
may or may not be fully tested, but at least should build. The
'development' revision is the most current. There are no guarantees
on this one, it may not function correctly, it may not run, it
may not even build.

MODULE LAYOUT

PrimeForm/GW consists of seven modules. Two of them may depend on
third-party toolkits. Here's a list of them, in some sort of
order of dependency.

pflib
Basic functionality and classes. Note the intention here is
portability. You shouldn't need to use a different base library.

pfmath
Multiprecision integer mathematics. The interface here is the
Integer class. The actual implementation will typically use a
third-party API. The GNU multiprecision library is the ideal
candidate here for portability and efficiency. Note the GMP
library is under the Lesser GPL, so be aware of the terms and
conditions if you use it.

pfgwlib
Dedicated FFT multiplication routines. The name derives from
the George Woltman libraries, based on the prime95 Mersenne
proving program. The interface here is rather baroque, so if
anyone intends to use a third-party FFT to implement the gw...()
function set for machines other than Intel, be very wary it is
not an easy task. George Woltman does have terms and conditions
on the use of these routines. Be sure to abide by them.

pfglue
The glue logic between pfmath and pfgwlib. Essentially this
includes conversions between the two, and a few other utility
functions such as small prime generation. If you change the
libraries used in pfmath and pfgwlib, you must change this.

pfoo
The object-oriented PrimeForm/GW engine. This is where the tests
are actually implemented. You shouldn't need to substitute another
library here.

pfio
File and display input-output routines. This module supports the file
formats offered by pfgw, and abstracts any screen, display, or GUI
interaction.

pfgw
The program entrypoint. There's nothing to stop you substituting
here, for example to add a GUI.

winpfgw
This is a Win32 GUI wrapper over the PFGW executable.  Still 
early in development. However, this version does allow most any
command line usable for PFGW, is in a true Win32 GUI app, contains
a tray icon, cuts down on screen IO, and is generally faster
than the command line version of PFGW.

The configure program in the root directory chooses which modules
to build for each of these, and possibly the two base API's
needed underneath. If you implement a similar module, be sure to
update configure.in and produce a new configure program using
autoconf.

Modules can't go anywhere. Specifically, all modules must live
precisely two subdirectories below the current directory. They
should have a configure program, and they should put their
output in a subdirectory called ".libs". Anything they need to
share should be put as a link in pfconfig/objects or
pfconfig/headers as appropriate. Remember to include "../../"
to allow any module to share those includes. Try to make your
modules exchangeable, for instance, if you have an alternative
to pfmath, still place a link called "pfmath.h" in the headers
directory. Apart from the headers directory, you should not
include files from another module using ".." - the modules
should be buildable independently.

To aim for some standardization, place modules that have the
core function set in the "pform" branch of the directory tree.
Place third-party API's or prebuilt code in the "packages" arm.
Place system-specific code in a subdirectory with the system
name, for instance, a Windows GUI would go in the "windows/pfgw"
directory and be a replacement for "pfgw".

Note for Windows developers: Since the Windows build environment
is not "unixlike", the build instructions are somewhat different
for Windows. Please however adhere to the layout above - it makes
life much easier for everyone else.

PATCH CREATION AND SUBMISSION GUIDELINES

0) First things first. If you intend to contribute, be sure to drop me a
line at chris_nash@prodigy.net so I can set you up a version control
account. Since all contributions will be labeled with the contributor name,
you do not need to annotate or initial your changes. The version control
will also merge your changes with others.

1) Submit one patch for each change you make. The patch may modify
multiple files but should only address a single issue or feature.
The patch should only change files in one module.

2) Include a brief description of your patch, as it will appear in
the ChangeLog to describe it to others. Note that each module has
its own ChangeLog.

3) If you have access to 'diff' to produce a file compatible with
the 'patch' utility, use it. This makes it easier to add and remove
patches if there is a conflict.

4) Don't make unnecessary edits. These range from things that
offend you personally (such as typing errors in comments) to the
downright stupid (changing tabs to spaces or vice versa, changing
carriage returns to CR/LF because you have a lousy text editor).
Such changes turn out to be devastating to version control and make
it difficult to merge changes. If of course these sort of problems
occur in the realm of your patch, then by all means correct them.

There is no preference for submission tab stops or line break characters.
Submissions in 'public' modules will be converted to UNIX (LF not CR/LF as
line break). The xception is modules to build on Windows only.

5) Try to keep to the coding guidelines. What coding guidelines?
There really aren't any. I'm relying on you using common sense and
good judgement here, but if things get messy, it may be worth
discussing. Use what already exists as a guide, and try to stick to
it. If you've added a piece of code and it looks nothing like the
code above or below, then that's not right.

I decided to be pretty slack about coding standards here, mainly
because I have a huge list of things I hate to see. If I had to
sit down and write out all the things I don't like, I'd be here
all day and I'd have to reject a lot of code (including my own).

6) Sounds ridiculous to say, but make sure your patch works before
submitting it. Make sure it builds, make sure it doesn't produce
compiler warnings, and make sure it doesn't have an obvious bug.
If something's not finished, don't submit. Evidently you can't
be sure that your code will function correctly on EVERY system -
that's what the 'development' revision is for.

7) Submit your patches to chris_nash@prodigy.net. You *must* include
the revision or source drop which the patch applies to, instructions
for how to apply the patch if needed. List any modified files, any
new files added, and any files removed.

8) You may, if desired, use the openpfgw mailing list files area at
http://groups.yahoo.com/group/openpfgw/files/
as a place to put experimental program builds or source code. The mailing
list is a good place to discuss plans you have, areas you'd like to work
on, and so on. Note however that files put in the mailing list files area
WILL NOT automatically be added to the source tree. Let me know if you
require this.

9) If you have an extensive feature that you wish to develop 'independently'
without running the risk of conflicting with other changes, it is possible
for me to create an 'experimental' branch in CVS. Few projects should need
this special treatment, so ask me if you feel you have a suitable project.
Note that, provided you give all the information in 7), this is usually
unnecessary.

Chris Nash
Lexington KY
UNITED STATES
chris_nash@prodigy.net

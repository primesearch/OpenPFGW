PRIMEFORM/GW RELEASE NOTES

This file includes late-breaking release details that did not make it into
other documentation in the package.  ALSO check the file News for additional
late breaking information.

PFGW v1.2 released Jan 30, 2005 
================================

PFGW Stable (v1.2 Release Candidate 0), 04 July 2004
================================
See "NEWS" file for most recent changes to this program.
This is now the "stable release" code.  Soon, PFGW 1.2 will be released, 
  based upon this source tree.

Version (dev) 1.2 dev_20030604
================================
Added PrZ file support (compressed ABCD/NewPGen)
Added a way in ABC type files to stop processing a certain variable, once
  a prime is found.
Extended the ABC2 format to allow a "downto" reverse search.


Version (dev) 1.2 dev_20030425
================================
Re-enabled SSE2 code in -tc and -tp (using Woltman 22.13 library).  This
  SSE2 code seems to be very stable. 
Ported current project to unix.  It has not been buildable under unix since
  March 2002.
WinPFGW has color changing Tray icon (tells whether it is working or not)
Primality TESTING now defaults to -a1 "mode".


Version (dev) 1.2 dev_20030108
================================
Woltman v22.12 library linked into the Win32 version.
Modified unary minus behavior.  -10^6 now reported as -100000 and not 100000
The multiple exponentiation problem still exists (i.e. PFGW sees 2^2^3 as
  64 and not as 256)
The code which does the SUMINP!=SUMOUT logic check has been relaxed (as per
  recommendation from George).  The Woltman code is optimized to be VERY
  strict about this, because it is just doing squaring of very large Mersenne
  numbers.  Within PFGW, we perform much more math, and are seeing spurious
  SUMINP!=SUMOUT errors from time to time.  This should eliminate those
  spurious errors, while still provide a very robust "quick" check for
  hardware errors.
The -tc -tp -t -tm use the SSE2 FFT's.  This was re-introduced during
  version dev_20021107, but was not documented there.
ALL testing modes (-t -tp -tc -tm), now force finding a FFT that is one
  bit per limb less than it is for other PRP testing.  This change is due
  to the fact that the testing mode logic puts much more stress on the FFTs
  than the simply Fermat PRP testing code does.  This modification is very
  similar to the -a1 level.  This change does slow down the testing somewhat,
  but should remove most if not all of the "Number is composite" problems
  (seen when testing "real" primes) due to rounding issues.  NOTE -a1 and
  -a2 will still work fine, and they will provide an FFT with even fewer
  bits per limb being used.  -a-1 would put the testing code right back
  where it was (faster, but higher chance of rounding problems)
Signficant cleanup and small bug fixing in the factoring code.  

Version (dev) 1.2 dev_20021107
================================
CPU Speed not being reported correct (changes to new v22-8 lib that needed addressed)
Several changes to WinPFGW (about box, verbose screen mode and some spelling errors)

Version (dev) 1.2 dev_20021031
================================
Updated The Woltman SSE2 code working much better. Still needs MORE testing

Version (dev) 1.2 dev_20020515
================================
Save/Restore code re-introduced again.

New Woltman code (v22 code), including SSE2 (Pentium4) support.
!!!NEED LOTS OF TESTING!!!

-tc and -tp are not using SSE2 code on a P4 (yet).
GFN DWT is not using SSE2 code yet.

There may be problems caused by the default GMP being built with alloca for
temporary storage.  This is due to the fact that GMP is using the stack for
local storage, and when this goes about 1MB, then the program will crash.
For very large numbers this is seen during the factoring stage (and probably
at other places also).  If experiencing problems such as this, simpy putting
the libgmp-3-naa.dll (no alloca verion of the dll) compiled for the correct
CPU into the directory with PFGW (or WinPFGW) will cause that dll to be
loaded and used by pfgw.  This should solve any problems relating to GMP.
Note that libgmp-3-naa.dll is about 1/2 the speed of libgmp-3.dll (for
the correct CPU), so it is not the default.  Also the "linked" in GMP is
a i386 build, which uses alloca.

Version 1.1 - 20020311
======================
Save/restore code has been disabled.

Version 1.1 - 20010511
======================
Order of processing on multiple exponentiations may not be what you 
would expect.  PFGW uses a left-right parsing, while exponentiations
"should" be processed right-left.  So  13*2^10^3+1 "should" be 
13*2^1000+1 which is prime but pfgw will process this number as
13*1024^3+1 which is not the same number.  When doing work with more
than one exponentation, be sure to use parenthesis to "help" pfgw get
your number right.  13*2^(10^3)+1 will get you the right results.


The '-n' nice flag is for Windows systems only. Users of unixlike systems
should use shell tools to change task priority as required.

-tc mode may incorrectly report composite results if N-1 is completely
factored. The problem has been fixed in the current development version,
but has not been fully regression tested. The problem only occurs in this
extreme case - suitable workarounds include removing an unnecessary factor
or using the -tm mode which will automatically make optimal choices.

Version 1.0 - 20001129
======================
The new prime generator code did not make it in time for this release. Users
are advised to manually set factoring limits to avoid factoring too deeply.
